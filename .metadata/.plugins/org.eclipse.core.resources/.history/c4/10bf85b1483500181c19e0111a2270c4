/*
Longest Path with Same Values in a Binary Tree
Given a binary tree, find the length of the longest path where each node 
in the path has the same value. This path may or may not pass through the root. 
The length of path between two nodes is represented by the number of edges between them.

Examples:

Input :
              2
             / \
            7   2
           / \   \
          1   1   2
Output : 2

Input :
              4
             / \
            4   4
           / \   \
          4   9   5
Output : 3
 */
public class Longest_Path_With_Same_Value_Problem {
	public static void main(String[] args) {
		Node root = new Node(1);
		Node a = new Node(2);
		Node b = new Node(3);
		Node c = new Node(3);
		Node d = new Node(5);
		Node e = new Node(6);
		Node f = new Node(7);
		root.left = a;
		root.right = b;
		a.left = c;
		a.right = d;
		b.left = e;
		b.right = f;
		findLongest(root);
		System.out.println(maximum);
	}
	
	static int maximum = 0;
	static int findLongest(Node root) {
		if (root == null) return 0;
		int left = 0, right = 0;
		if (root.left != null) {
			System.out.println("left " + root.data);
			if (root.data == root.left.data) left += 1 + findLongest(root.left);
			else left = findLongest(root.left);
		}
		if (root.right != null) {
			System.out.println("right " + root.data);
			if (root.data == root.right.data) right += 1 + findLongest(root.right);
			else right = findLongest(root.right);
		}
		int result = Math.max(left, right);
		maximum = Math.max(result, maximum);
		return result;
	}
}
