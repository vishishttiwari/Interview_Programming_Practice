package traversal;

import java.util.HashSet;
import java.util.Stack;

import add.Add_Edge;
import print.Print;
import util.Graph;
import util.Node;

public class Depth_First_Traversal_Iterative {
	public static void main(String[] args) {
		Graph graph = new Graph(new int[]{0,1,2,3,4});
		
		Add_Edge.addDirected(graph, 2, 1);
		Add_Edge.addDirected(graph, 1, 0);
		Add_Edge.addDirected(graph, 0, 2);
		Add_Edge.addDirected(graph, 0, 3);
		Add_Edge.addDirected(graph, 3, 4);
		Add_Edge.addDirected(graph, 4, 0);
		
		Print.print(graph);
		
		traversal(graph, 1);
	}
	
	public static void traversal(Graph graph, int src) {
		HashSet<Integer> set = new HashSet<Integer>();
		Stack<Node> stack = new Stack<Node>();
		
		for (int i = 0; i < graph.adjacencyList.length; i++) {
			if (graph.adjacencyList[i].value == src) {
				stack.add(graph.adjacencyList[i]);
				break;
			}
		}
		
		while (!stack.isEmpty()) {
			System.out.println(set.toString());
			if (set.contains(stack.peek().value)) {
				stack.pop();
				continue;
			}
			set.add(stack.peek().value);
			System.out.println(stack.peek().value + " -> ");
			for (int i = 0; i < stack.peek().list.size(); i++) {
				//System.out.println(stack.peek().value + " " + stack.peek().list.get(i).value);
				stack.add(stack.peek().list.get(i));
			}
			//stack.pop();
		}
		System.out.println("Done");
	}
}
