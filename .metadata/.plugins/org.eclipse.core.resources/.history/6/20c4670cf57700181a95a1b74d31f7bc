package Grids;

public class Maximum_Sum_In_A_2_x_N_Grid_Such_That_No_Two_Elements_Are_Adjacent {
	public static void main(String[] args) {
		System.out.println(recurssion(new int[][]{{ 1, 2, 3, 4, 5},
            { 6, 7, 8, 9, 10}}, 4));
	}
	
	public static int recurssion(int[][] arr, int col) {
		if (col < 0) return 0;
		if (col == 0 || col == 1) return Math.max(arr[0][col], arr[1][col]);
		int A = 0, B = 0;
		A = Math.max(arr[0][col], arr[1][col]) + recurssion(arr, col - 2);
		B = Math.max(arr[0][col - 1], arr[1][col - 1]) + recurssion(arr, col - 3);
		return Math.max(A, B);
	}
	
	static int[] memo;
	public static int DP(int[][] arr, int col) {
		if (col < 0) return 0;
		if (col == 0 || col == 1) {
			memo[col] = Math.max(arr[0][col], arr[1][col]);
			return memo[col];
		}
		if (memo[col] != 0) return memo[col];
		int A = 0, B = 0;
		A = Math.max(arr[0][col], arr[1][col]) + recurssion(arr, col - 2);
		B = Math.max(arr[0][col - 1], arr[1][col - 1]) + recurssion(arr, col - 3);
		memo[col] = Math.max(A, B); 
		return memo[col];
	}
}
