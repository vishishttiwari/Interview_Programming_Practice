package Longest_Common_Sequence;

public class Longest_Common_Sequence {
	public static void main(String[] args) {
		memo = new int["GXTXAYB".length() + 1]["AGGTAB".length() + 1];
		System.out.println(DP("GXTXAYB", "AGGTAB", 1, 1));
	}
	
	public static int memoization(String str1, String str2) {
		int[][] memo = new int[str1.length() + 1][str2.length() + 1];
		for (int i = 1; i < memo.length; i++) {
			for (int j = 1; j < memo[i].length; j++) {
				if (str1.charAt(i - 1) == str2.charAt(j - 1))
	                memo[i][j] = memo[i-1][j-1] + 1;
	            else
	                memo[i][j] = Math.max(memo[i-1][j], memo[i][j-1]);
			}
		}
		return memo[str1.length()][str2.length()];
	}
	
	public static int recursion(String str1, String str2) {
		if ((str1.length() == 0) || (str2.length() == 0)) return 0;
		if (str1.charAt(0) == str2.charAt(0))
			return 1 + recursion(str1.substring(1), str2.substring(1));
		else
			return Math.max(recursion(str1.substring(1), str2), recursion(str1, str2.substring(1)));
	}
	
	static int[][] memo;
	public static int DP(String str1, String str2, int firstIndex, int secondIndex) {
		if (memo[firstIndex - 1][secondIndex - 1] != 0) return memo[firstIndex - 1][secondIndex - 1];
	    if (firstIndex == 0 || secondIndex == 0) {
	        return 0;
	    }
	    if (str1.charAt(firstIndex - 1) == str2.charAt(secondIndex - 1)) {
	        memo[firstIndex - 1][secondIndex - 1] = 1 + DP(str1, str2, firstIndex - 1, secondIndex - 1);
	    }
	    else {
	        memo[firstIndex - 1][secondIndex - 1] = Math.max(DP(str1, str2, firstIndex - 1, secondIndex), DP(str1, str2, firstIndex, secondIndex - 1));
	    }
	    return memo[firstIndex - 1][secondIndex - 1];
	}
}
