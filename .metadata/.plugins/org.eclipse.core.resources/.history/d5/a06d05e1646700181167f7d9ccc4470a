package checking;

import java.util.HashMap;

import general.Node;

public class Check_If_A_Binary_Tree_Contains_Two_Duplicate_Subtrees {
	public static void main(String[] args) {
		Node root = new Node(0);
		root.left = new Node(1);
		root.right = new Node(2);
		root.left.left = new Node(3);
		root.left.right = new Node(4);
		root.right.right = new Node(1);
		root.right.right.left = new Node(3);
		root.right.right.right = new Node(4);
		System.out.println(checkDup(root));
	}
	
	static HashMap<Integer, Node> map;
	static boolean found;
	public static boolean checkDup(Node root) {
		map = new HashMap<Integer, Node>();
		found = false;
		traverse(root);
		return found;
	}
	
	public static void traverse(Node root) {
		if (root == null) return;
		if (map.get(root.value) != null) {
			System.out.println("Already there: " + root.value + " " + map.get(root.value));
			if (check(root, map.get(root.value))) found = true;
			return;
		}
		else {
			System.out.println("Was not there: " + root.value);
			map.put(root.value, root);
		}
		traverse(root.left);
		traverse(root.right);
	}
	
	public static boolean check(Node root1, Node root2) {
		found = true;
		checkTree(root1, root2);
		return found;
	}
	
	public static void checkTree(Node root1, Node root2) {
		if ((root1 == null) && (root2 != null)) {
			found = false;
			return;
		}
		if ((root1 != null) && (root2 == null)) {
			found = false;
			return;
		}
		if ((root1 == null) && (root2 == null)) {
			return;
		}
		checkTree(root1.left, root2.left);
		checkTree(root1.right, root2.right);
		if (root1.value != root2.value) found = false;
	}
}
