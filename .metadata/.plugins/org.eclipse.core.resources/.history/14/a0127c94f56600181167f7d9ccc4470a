package construction;

import general.Node;

public class Inorder_And_Postorder_To_Binary_Tree {	
	public static void main(String[] args) {
		int[] in = {2, 1, 3};
		int[] post = {2, 3, 1};
		construct(in, post);
	}
	
	static int postIndex;
	public static Node construct(int[] in, int[] post) {
		postIndex = in.length - 1;
		return constructTree(in, post, 0, in.length - 1);
	}
	
	public static Node constructTree(int[] in, int[] post, int start, int end) {
		if (start > end) return null;
		Node root = new Node(post[postIndex]);
		postIndex--;
		if (start == end) return root;
		int inIndex = find(in, post[postIndex], start, end);
		
		root.left = constructTree(in, post, start, inIndex - 1);
		root.right = constructTree(in, post, inIndex + 1, end);
		return root;
	}
	
	public static int find(int[] inorder, int index, int start, int end) {
		for (int i = start; i <= end; i++) {
			if (inorder[i] == index) return i;
		}
		return -1;
	}
}
