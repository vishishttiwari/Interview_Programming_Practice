package construction;

import general.Node;
import general.Print;

public class Preorder_And_Postorder_To_Binary_Tree {
	public static void main(String[] args) {
		int[] pre = {1, 2, 4, 8, 9, 5, 3, 6, 7};
		int[] post = {8, 9, 4, 5, 2, 6, 7, 3, 1};
		Print.print(constructTree(pre, post));
	}
	
	static int preIndex;
	static Node constructTree(int pre[], int post[]) {
		preIndex = 0;
		return constructTreeUtil(pre, post, 0, pre.length - 1, pre.length);
	}
	
	static Node constructTreeUtil(int pre[], int post[], int l, int h, int size) {
		if (preIndex >= size || l > h) return null;
		Node root = new Node(pre[preIndex++]);
		if (l == h || preIndex >= size) return root;
		int i;
		for (i = l; i <= h; i++) {
			if (post[i] == pre[preIndex]) break;
		}
		if (i <= h) {
			root.left = constructTreeUtil(pre, post, l, i, size);
			root.right = constructTreeUtil(pre, post, i + 1, h, size);
		}
		return root;
	}		
}
