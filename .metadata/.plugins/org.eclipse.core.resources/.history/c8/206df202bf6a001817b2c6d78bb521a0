
public class Coin_Change_Problem {
	
	
	
	// Solved using Recursion
	static long CoinChangeRecursion(long amount, long[] coins, int position){
        if (amount == 0) return 1; // This is because this produced the exact value so this must be one solution
        if (amount < 0) return 0; // This is because this produced went over it so must not be one of the solution
        
        long count = 0;
        
        // The following block is used to make sure different combinations are ignored. 
        // Example: amount = 4 and coins = {1,2,3}
        // 1 + f(3)
        // 1 + 1 + f(2)
        // 1 + 1 + 1 + f(1)
        // 1 + 1 + 1 + 1 + f(0) - HIT
        // 1 + 1 + 2 + f(0) - HIT
        // 1 + 2 + f(1)
        // Now at this point, f(1) will not check 1 because the position is at 2 so it will not check 1
        // So the possibility of 1 + 2 + 1 is not there anymore
        // It will then compare f(1) with 2 and 3 which will give 0 in both cases
        for (int coin = position; coin < coins.length; coin++) {
            count += CoinChangeRecursion(amount-coins[coin], coins, coin);
        }
        return count;
    }
	
	// Solved using memoization
	static long[] memo; // array for memoization
	static long CoinChangeMemoization(int amount, long[] coins, int position){
        if (amount == 0) return 1; // This is because this produced the exact value so this must be one combination
        if (amount < 0) return 0; // This is because this produced went over it so must not be one of the solution
        if (memo[amount] != 0) return memo[amount]; // If it was obtained before then no need to find it again
        
        long count = 0;
        for (int coin = position; coin < coins.length; coin++) {
            count += CoinChangeRecursion(amount-coins[coin], coins, coin);
        }
        memo[amount] = count;
        return memo[amount];
    }
	
	// Solved using DP
	static long CoinChangeDP(int amount, int[] coins, int position){
        long[] memoDP = new long[amount + 1]; // array for DP
        memoDP[0] = 1;
        
        // For every coin it sees which amount will include that coin. So for coin 2, all even(2,4,6) will be incremented because
        // for that amount, 2 is probably needed.
        // Eg: 10,{2,5,3,6}
        // The array will change as follows:
        // 1 0 1 0 1 0 1 0 1 0 1 
        // 1 0 1 0 1 1 1 1 1 1 2 
        // 1 0 1 1 1 2 2 2 3 3 4 
        // 1 0 1 1 1 2 3 2 4 4 5 
        for (int coin:coins) {
            for (int i = 1; i < memoDP.length; i++) {
                if (i >= coin) memoDP[i] += memoDP[i - coin];
            }
        }
        return memoDP[amount];
    }
}
