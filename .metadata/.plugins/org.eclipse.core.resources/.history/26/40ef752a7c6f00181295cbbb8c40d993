package strings;

import java.util.HashMap;

public class Find_Smallest_Window_In_A_String_Containing_All_Characters_Of_Another_String {
	public static void main(String[] args) {
		System.out.println(find("this is a test string", "tist"));
	}
	
	public static String find(String string, String pattern) {
		int start = -1, end = -1;
		
		HashMap<Character, Integer> map = new HashMap<Character, Integer>();
		int index = 0;
		for (int i = 0; i < pattern.length(); i++) {
			if (map.get(pattern.charAt(i)) == null) {
				map.put(pattern.charAt(i), index);
				index++;
			}
		}
		int[] count = new int[map.size()];
		for (int i = 0; i < string.length(); i++) {
			if (map.get(pattern.charAt(i)) != null) {
				if (count[map.get(pattern.charAt(i))] == 0) index--;
				count[map.get(pattern.charAt(i))]++;
				if (index == 0) {
					end = i;
					break;
				}
			}
		}
		for (int i = 0; i < string.length(); i++) {
			if (map.get(pattern.charAt(i)) != null) {
				count[map.get(pattern.charAt(i))]--;
				if (count[map.get(pattern.charAt(i))] == 0) {
					start = i;
					break;
				}
			}
		}
		return string.substring(start, end);
	}
}
